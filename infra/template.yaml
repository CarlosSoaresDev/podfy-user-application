AWSTemplateFormatVersion : 2010-09-09
Description: Up services to user application serverless [SG, ApiGateway, lambda]
Transform: AWS::Serverless-2016-10-31

Parameters:
  ApplicationName:
    Type: String
  SQSName:
    Type: String
  AccessKey:
    Type: String
  SecretKey:
    Type: String
  UserSecretKey:
    Type: String
  VPC:
    Type: String
  PrivateSubnetOne:
    Type: String
  PrivateSubnetTwo:
    Type: String

Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    Runtime: dotnet6
    CodeUri: s3://lambda-aplication-repository/user-application/release.zip    
    Environment:
        Variables:
          USER_SECRET_KEY: !Ref UserSecretKey
          ACCESS_KEY: !Ref AccessKey
          SECRET_KEY: !Ref SecretKey
          SQS_NAME: !Ref SQSName   
    # VpcConfig:
    #   SecurityGroupIds:
    #     - !Ref ServerlessSecurityGroup
    #   SubnetIds:
    #     - !Ref PrivateSubnetOne
    #     - !Ref PrivateSubnetTwo

Resources:
  
# -------------------------------------------------------------------------
# Deploy SG EC2
# -------------------------------------------------------------------------

  # ServerlessSecurityGroup:
  #  Type: AWS::EC2::SecurityGroup
  #  Properties:
  #    GroupDescription: SecurityGroup for Serverless Functions
  #    VpcId: !Ref VPC

# -------------------------------------------------------------------------
# Deploy API Gateway serverless
# -------------------------------------------------------------------------
  
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${ApplicationName}-api'
      StageName: Prod
      Cors:
        AllowMethods: "'POST'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false

# -------------------------------------------------------------------------
# Deploy Lambda serverless function
# -------------------------------------------------------------------------

  LambdaSingInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ApplicationName}-sing-in'
      Description: This lambda execulte an SingIn of the user
      Handler: podfy-user-application::podfy_user_application.Function::SingInFunctionHandlerAsync
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /SingIn
            Method: POST

  LambdaSingUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ApplicationName}-sing-up'
      Description: This lambda execulte an SingUn of the user
      Handler: podfy-user-application::podfy_user_application.Function::SingUpFunctionHandlerAsync
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /SingUp
            Method: POST

  LambdaValidateTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ApplicationName}-validate-token'
      Description: This lambda verify if token is valid
      Handler: podfy-user-application::podfy_user_application.Function::ValidateTokenHandlerAsync
      Role: !GetAtt LambdaValidateTokenRole.Arn

  LambdaValidateTokenRole:
    Type: AWS::IAM::Role
    Description: Lambda Function Role that will access to Core API.
    Properties:
      RoleName: LambdaValidateTokenRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
          PolicyName: LambdaValidateTokenPolicy
  
Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
  LambdaValidateTokenRole:
    Description: Role of the lambda
    Value: !GetAtt LambdaValidateTokenRole.Arn